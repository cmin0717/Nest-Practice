- 인터셉터란?
요청 -> 핸들러 -> 응답 과정에서 각 과정을 들어가기 전에 데이터를 인터셉트하여 추가 작업을 진행하는걸 말한다.
예를 들어 응답 과정에서 유저의 비밀번호는 유출하는것은 좋지 않다 그렇기에 작업 과정에서는 비밀번호가 있지만
응답한 데이터에는 비밀번호를 빼주어야한다.
이럴때 인터셉터를 사용하여 처리할수있다.
핸들러에서 나온 응답 데이터를 인터셉트하여 새로운 DTO를 사용하여 비밀번호를 뺀 데이터를 응답해주는형식이다. 

- plainToClass
새로운 DTO클래스의 인스턴스를 주어진 데이터로 생성한다.
새로운 DTO를 생성시 @Expose가 되어있는 컬럼만 사용하도록 하는 옵션인 excludeExtraneousValues를 사용할수도있다.
해당 데이터에서 기본적으로 어떤 컬럼을 빼고 데이터를 넣는 excludePrefixes옵션도 있다.

- 직렬화(Serialization)이란?
직렬화란 객체를 저장, 전송할 수 있는 특정 포맷 상태로 바꾸는 과정이라고 할 수 있다.
역직렬화는 특정 포맷 상태의 데이터를 다시 사용할 객체로 변환하는것이다.
직렬화를 통해 네트워크 통신에 유용한 데이터로 변환하거나 메모리나 디스크에 저장하기 유용한 데이터로 변환하게된다.

- nest에서 어디서 직렬화가 일어나는가?
처음 요청 데이터를 받아 DTO를 통해 유효성검사를 진행한다.
해당 과정에서 class-transformer를 통해 JSON데이터가 클래스의 인스턴스에 할당되면서 역직렬화가 일어난다.
nest js에서는 컨트롤러로 응답을 진행할때 알아서 직렬화하여 데이터를 전송해준다.
혹은 인터셉트 과정에서 'rxjs' 라이브러리의 map매서드를 통해 데이터가 JSON형태로 변환되어 직렬화가 수행된다.
그 과정 속에서 불필요한 정보를 차단할수도있다. 예를들어 유저의 비밀번호와 같이 굳이 보내지 않아도 되는 데이터를 사전에 차단하는것이다.

- 직렬화를 왜 해야하나?
여러 말로는 데이터의 저장, 데이터의 전송, 다른 시스템과의 상호 운용성등을 위해 직렬화를 사용한다고 하는데
사실 잘 와닿지는 않느다.
내가 생각하기에는 실제 응답을 보내기 전에 데이터 조작에 대한 깨끗한 추상화 계층를 제공하거나 (예를 들어 비밀번호를 빼고 전송하는것)
혹은 현재 데이터가 어떤 형태로 있어야 작업이 수월하게 진행되는가에따라 사용하기 쉽게 형변환을 하는것 (JSON -> 객체, 객체 -> JSON)
이런 느낌으로 직렬화가 필요한거 같다.