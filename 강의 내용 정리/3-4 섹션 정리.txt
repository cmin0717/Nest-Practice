- DTO 란?

Date Transform Object
데이터 전송 객체를 의미한다.
데이터를 어떤 형태로 전송하는지 객체로 타입을 지정하여 안정되 타입을 받을수있게한다.
해당 과정에서 유효성검사를 진행할수도 있다.
요청 본문이 컨트롤러로 오기전에 Pipe단계에서 DTO의 유효성 검사가 진행된다.


- 유효성 검사의 진행 과정

1. 요청 본몬을 받은 서버는 유요성 검사 파이프로 자동으로 인계된다.
2. class-transformer를 통해 body값을 DTO클래스의 인스턴스에 값을 넣어준다.
3. class-validator의 데코레이터를 통해 해당 인스턴스의 유효성을 판단한다.
4. 데코레이터를 통해 유효성을 판단하여 알맞은 값이 오면 넘기고 그렇지 않으면 오류 처리하는것이다.
5. class-validator의 데코레이터에는 여러 옵션을 넣어줄수있는데 오류가 발생시 어떤 메세지를 넣을것인가 등등 다양한 옵션이 있다.
위와 같은 방향으로 진행되기에 class-validator와 class-transformer 둘다 설치해 주어야하는것이다.


- Ts -> Js로 컴파일시 데코레이터와 DTO의 정보의 변화

DTO는 개발과정에서 데이터의 타입을 우리가 어떤것으로 지정했기에 더욱 안전하게 개발할수있다.
하지만 TS는 항상 JS로 컴파일되어 실행되기에 실제 실행에서는 이런 유형 정보는 의미가 없어진다.
그러면 유효성 검사에 의미가 없어진다.
이런걸 방지하고자 tsconfig파일의 옵션중에 데코레이터의 정보를 컴파일시 유지할것인가에 대한 옵션이 있다.

__decorate([
    (0, common_1.Get)('/:id'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], MessagesController.prototype, "getMessages", null);
해당 부분과 같이 데코레이터의 역활을 하는 코드를 같이 컴파일 함으로써 유형정보를 컴파일시에도 잃어버리지 않고 진행할수있게 된다.