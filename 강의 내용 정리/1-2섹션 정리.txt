-- nest js 동작 과정 --
내부적으로는 nest js 자체는 들어오는 요청을 처리하지 않는다.
nest js는 HTTP 서버 구현을 위해 두가지 라이브러리중 하나를 사용한다.
express 혹은 fastify를 사용하여 HTTP 서버를 구축 한다.
EX : 요청 -> 구축한 http서버 -> nest 코드
쉽게 말해 nest는 express를 타입이 안전하게 사용하며 안정성과 확장성을 키운 프레임워크이다.
타입 안전성: NestJS는 TypeScript로 작성되었기 때문에 타입 안전성이 뛰어납니다. 이는 개발자가 버그를 방지하고 코드를 보다 쉽게 유지 관리할 수 있도록 도와줍니다.
확장성: NestJS는 Express의 기능을 확장하여 클라이언트 측의 API를 더 쉽게 만들고 관리할 수 있습니다.
모듈성: NestJS는 모듈 기반 아키텍처를 사용하여 개발자가 코드를 보다 쉽게 구성하고 관리할 수 있습니다.
테스트 가능성: NestJS는 테스트를 지원하기 때문에 개발자가 코드를 보다 쉽게 테스트하고 디버그할 수 있습니다.

-- 대략적인 API 구성 --
Pipe (파이프) : 요청 데이터의 유효성를 담당한다.
Gaurd (가드) : 인증에 사용한다.
Controller (컨트롤러) : 요청을 라우트하는데 사용한다.
Service (서비스) : 비지니스 로직들이 실행된다.
Repository (레포지토리) : 데이터베이스의 접근에 사용한다.
