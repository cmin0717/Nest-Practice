- test의 종류
Unit Testing : 한 번에 하나의 클래스만 살펴보고 해당 클래스의 모든 메서드가 예상대로 작동하는지 확인하는 테스트이다.
에) 컨트롤러.spec.ts와 같이 어떤 기능을 테스트 하는 것
End to End testing(e2e test) : 종단 간 테스트이며 애플리케이션의 전체를 복사본을 가지고 각 요청에 따라 잘 작동하는지 확인하는 테스트이다
예) test파일의 app.e2e-spec.ts와 같이 해당 애플리케이션의 전체를 테스트 하는 것

- test를 진행하려면 새로운 복사본이 필요하다.
예를 들어 auth서비스를 테스트하려고한다면 auth서비스의 새로운 인스턴스를 생성해야한다.

- Fake 함수란?
테스트 과정에서 만일 Repo를 실제로 사용하게 된다면 테스트이지만 실제 DB에 값이 저장하게된다.
그런걸 방지하고자 fake함수를 만들어서 userService를 의존성부여하지만 실제 사용하는것은 직접 만든 fake함수를 사용함으로써 실제 DB에
접근하지 않고도 테스트를 진행할수있게된다.
또한 fake함수를 사용함으로써 해당 클래스의 테스트 신뢰성을 높여줄수있다.
fake함수를 사용하지 않게 되면 의존성이 있는 다른 클래스에서 발생하는 오류도 해당 클래스 테스트에서 발생시 신뢰성이 떨어지게된다.
이러한 목적으로 fake함수를 사용하여 해당 클래스의 테스트 신뢰성과 DB접근을 막을수 있는것이다.

- Fake 함수 구현 방법
Fake함수를 구현하는 방법은 여러개가 있다.
그냥 하나의 폼을 유지하고 테스트마다 사용할 fake함수를 변경해주면 하는 방법도 있고
해당 메서드의 주요 로직을 간단하게 짜서 구현하는 방법도 있다.
fake함수로 만들 클래스의 모든 메서드를 구현해야하는가? 놉놉
테스트할 클래스에서 사용할 메서드들만 구현하면된다.

- 테스트의 병렬 실행
package.json파일에서 jest의 명령어를 변경하여 테스트를 병렬처리하게 할수있다.
병렬 처리를 하게되면 훨씬 빠르게 테스트를 진행할수있지만 중복 실행이 발생할수도있다.
순차적 처리(디폴트) - "test:watch": "jest --watch"
병렬적 처리 - "test:watch": "jest --watch --maxWorkers=1"

- Cannot find module오류
테스트 과정에서 src형태로 임포트할경우 오류가 발생할수있다.
절대 경로로 지정할경우 컴파일후 사용할수없게 될수도 있기에 상대 경로로 지정하는것이 안정하다.
package.json파일에서 jest의 path를 설정하는것이로도 해결할수있는듯하다.