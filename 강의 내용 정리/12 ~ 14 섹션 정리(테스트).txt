- test의 종류
Unit Testing : 한 번에 하나의 클래스만 살펴보고 해당 클래스의 모든 메서드가 예상대로 작동하는지 확인하는 테스트이다.
에) 컨트롤러.spec.ts와 같이 어떤 기능을 테스트 하는 것
End to End testing(e2e test) : 종단 간 테스트이며 애플리케이션의 전체를 복사본을 가지고 각 요청에 따라 잘 작동하는지 확인하는 테스트이다
예) test파일의 app.e2e-spec.ts와 같이 해당 애플리케이션의 전체를 테스트 하는 것

- test를 진행하려면 새로운 복사본이 필요하다.
예를 들어 auth서비스를 테스트하려고한다면 auth서비스의 새로운 인스턴스를 생성해야한다.

- Fake 함수란?
테스트 과정에서 만일 Repo를 실제로 사용하게 된다면 테스트이지만 실제 DB에 값이 저장하게된다.
그런걸 방지하고자 fake함수를 만들어서 userService를 의존성부여하지만 실제 사용하는것은 직접 만든 fake함수를 사용함으로써 실제 DB에
접근하지 않고도 테스트를 진행할수있게된다.
또한 fake함수를 사용함으로써 해당 클래스의 테스트 신뢰성을 높여줄수있다.
fake함수를 사용하지 않게 되면 의존성이 있는 다른 클래스에서 발생하는 오류도 해당 클래스 테스트에서 발생시 신뢰성이 떨어지게된다.
이러한 목적으로 fake함수를 사용하여 해당 클래스의 테스트 신뢰성과 DB접근을 막을수 있는것이다.

- Fake 함수 구현 방법
Fake함수를 구현하는 방법은 여러개가 있다.
그냥 하나의 폼을 유지하고 테스트마다 사용할 fake함수를 변경해주면 하는 방법도 있고
해당 메서드의 주요 로직을 간단하게 짜서 구현하는 방법도 있다.
fake함수로 만들 클래스의 모든 메서드를 구현해야하는가? 놉놉
테스트할 클래스에서 사용할 메서드들만 구현하면된다.

- 테스트의 병렬 실행
package.json파일에서 jest의 명령어를 변경하여 테스트를 병렬처리하게 할수있다.
환경변수를 이용하여 테스트용 DB을 사용할경우에는 순차적 처리로 진행해야 DB오류가 발생하지 않는다.
병렬적 처리(디폴트) - "test:watch": "jest --watch"
순차적 처리 - "test:watch": "jest --watch --maxWorkers=1"

- Cannot find module오류
테스트 과정에서 src형태로 임포트할경우 오류가 발생할수있다.
절대 경로로 지정할경우 컴파일후 사용할수없게 될수도 있기에 상대 경로로 지정하는것이 안정하다.
package.json파일에서 jest의 path를 설정하는것이로도 해결할수있는듯하다.

- 컨트롤러 테스트
유닛테스트로 컨트롤러를 테스트할때는 데코레이터들은 없다고 생각하고 해당 메서드를 테스트하는것이다.
HTTP메서드와 데코레이터를 테스트하는것은 e2e테스트에서 하는것이지 유닛테스트에서 하는것이 아니다.
기본적으로 컨트롤러에는 여러 로직이 들어가 있지 않고 서비스로직을 호출하기에 테스트 코드가 복잡해지지 않는다.

- e2e 테스트
e2e 테스트는 app의 복사본을 가지고 테스트하게된다.
하지만 여기서 문제점이 main에서 설치한 미들웨어들이 적용되지 않는것이다.
app를 다시 생성하기에 main에서 설정한 글로벌미들웨어들은 설치되지 못한것이다.
그럼 어케함? - 방법은 2가지가 있다.
1. main에서 사용할 미들웨어를 하나의 클래스로 setup클래스를 만들어서 main과 e2e에서 해당 클래스를 가지고 미들웨어들을 설치하는법
2. e2e테스트는 app module를 복사하는것이기에 app모듈에서 사용할 미들웨어들을 글로벌로 연결시켜주는 방법이 있다.

- 테스트용 데이터베이스 사용
개발용과 테스트용의 데이터베이스를 별개로 두어 테스트에 용이하게 사용할수있다.
그러기 위해서는 환경변수를 이용하여 현재 어떤 작업인지에 따라 불러오는 env파일을 다르게 한다면 각 작업마다 다른 env파일을 사용할수있게된다.
e2e 테스트를 실행할때마다 데이터베이스를 초기화 해주어야하는데 현재는 물리적으로 파일을 지웠다 생성했다하는걸로 구현하였다.
더 좋은 방법이 있을거같은데 아직 찾지 못했다.

- package-json에서 환경변수 추가하기
cross-env 라이브러리를 통해 package-json에서 명령어에 cross-env 환경변수명=~~~ 를 맨앞단에 같이 작성하면
실행하면서 환경변수를 추가해주는거같다.

- 아직 해결하지 못한 궁금증
jest에서 테스트를 순차적으로 하기위해 maxWorkers를 1로 설정하였지만 db연결에 지연이있어 오류가 발생한다.
아직 해결법을 찾지못했다.
또한 Jest did not exit one second after the test run has completed. 경고문이 나온는데 처리를 해주면 나오지는 않지만 왜 이런 경고문이
나오는지 확인하지못했다.
테스트가 끝났는데도 비동기 처리가 남아있어서 테스트를 종료하지 못하는것인데 어떤 비동기가 남아있는지 파악하지 못했다.