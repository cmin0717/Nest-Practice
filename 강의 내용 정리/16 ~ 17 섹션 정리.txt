- nestJS의 전체적인 사이클 흐름(요청 수명 주기)
// 들어오는 요청
// 글로벌 바인딩된 미들웨어
// 모듈 바운드 미들웨어
// 글로벌 가드
// 컨트롤러 가드
// 루트 가드
// 글로벌 인터셉터(프리컨트롤러)
// 컨트롤러 인터셉터(프리 컨트롤러)
// 경로 인터셉터(프리 컨트롤러)
// 글로벌 파이프
// 컨트롤러 파이프
// 경로 파이프
// 경로 매개변수 파이프
// 컨트롤러(메소드 핸들러)
// 서비스(있는 경우)
// 경로 인터셉터(사후 요청)
// 컨트롤러 인터셉터(사후 요청)
// 글로벌 인터셉터(사후 요청)
// 예외 필터(라우팅, 컨트롤러, 전역) // 위 과정중 문제가 생기면 바로 예외필터로 넘어오게 된다.
// 서버 응답

- 가드 설정을 위한 커스텀 미들웨어
현재 유저의 admin정보를 가지고 가드를 설정해야한다.
하지만 가드는 인터셉트보다 먼저 실행되기에 req에서 해당 유저의 정보를 읽어 올수없다.
인터셉트과정에서 req에 유저 정보를 입력해주니깐
그럼으로 가드보다 먼저 실행되는것이 미들웨어이니 커스텀 미들웨어를 설정하여 가드에서 현재 유저 정보를 볼수있게 처리해주어야한다.

- quary데이터의 유효성 검사
quary데이터는 스트링형식으로 전달된다.
그럼으로 Transform를 이용하여 들어오는 데이터를 우리가 원하는 데이터형으로 바꾸어 들오게 하여 유효성을 검사한다.
값이 하나로만 온다면   @Transform(({ value }) => parseInt(value)) 이런 형식으로 형변환
값이 객체로 온다면  @Transform(({ obj }) => obj.user.id) 이런식으로 변환해준다.
여기서 value와 obj는 임의의 이름이 아닌 정해진 형식이다.

- createQueryBuilder에 대하여
자세한 내용은 공식문서를 보면서 사용하는것이 좋을듯하다.
여기다가 모든걸 정리할수도 없고 딱히 뭘 정리할게 없다.
그냥 sql문법을 사용하여 쿼리를 보다더 커스텀하게 보낼수있게 해주는기능이다.